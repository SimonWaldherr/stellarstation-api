/*
 * Copyright 2018 Infostellar, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

syntax = "proto3";

import "google/protobuf/timestamp.proto";

package stellarstation.api.v1;

option java_multiple_files = true;
option java_package = "com.stellarstation.api.v1";

// A request to open a stream to a satellite. The bi-directional stream can be
// used to both receive telemetry from the satellite and send commands to it.
message SatelliteStreamRequest {
  // The NORAD ID of the satellite to open a stream with.
  string norad_id = 1;
}

// A chunk or frame of telemetry data that has been received from a satellite.
message Telemetry {
  // Type of telemetry.
  enum Type {
    // Raw IQ data.
    IQ = 0;

    // Demodulated and decoded telemetry data.
    DECODED = 1;
  }
  // The type of this telemetry data.
  Type type = 1;

  // Timestamp when the first byte of Telemetry.data was received.
  google.protobuf.Timestamp timeFirstByteReceived = 2;

  // Timestamp when the last byte of Telemetry.data was received.
  google.protobuf.Timestamp timeLastByteReceived = 3;

  // The payload of this chunk.
  bytes data = 4;
}

// A response in a satellite stream.
message SatelliteStreamResponse {

  oneof Response {
    // A chunk of frame of telemetry data received from the satellite.
    Telemetry telemetry = 1;
  }
}

// The StellarStation public API.
service StellarStationAPI {
  // Open a stream to a satellite.
  rpc SatelliteStream (stream SatelliteStreamRequest) returns (stream SatelliteStreamResponse);
}
